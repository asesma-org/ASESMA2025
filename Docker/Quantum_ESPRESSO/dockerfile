FROM ubuntu:latest
## set some necessary env variables (e.g. let mpirun run as root)
## get rid of some errors: https://github.com/open-mpi/ompi/issues/4948
ENV DEBIAN_FRONTEND=noninteractive
ENV OMPI_ALLOW_RUN_AS_ROOT=1
ENV OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1
ENV OMPI_MCA_btl_vader_single_copy_mechanism=none

RUN apt update && apt install -y --no-install-recommends \
    apt-transport-https \
    build-essential \
    ca-certificates \
    cmake \
    curl \
    g++ \
    gfortran \
    git \
    gnupg \
    openssl \
    less \
    libmkl-full-dev \
    libfftw3-dev \
    hdf5-tools \
    libhdf5-dev \
    libnfft3-dev \
    libopenmpi-dev \
    openmpi-bin \
    ssh \
    vim \
    wget \
    && \
    apt autoremove --purge -y && \
    apt autoclean -y && \
    rm -rf /var/cache/apt/* /var/lib/apt/lists/*


RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip 

RUN mkdir /python_source
RUN mkdir /python_source/site-packages

#install dftpy
RUN pip install --target /python_source/site-packages matplotlib numpy pandas dftpy

ENV PYTHONPATH=/python_source/site-packages



### create source dir
RUN mkdir /source
#

RUN apt-get update &&  DEBIAN_FRONTEND=noninteractive apt-get install -y curl sudo wget git less rsync nano openssl ca-certificates

RUN cd /source && apt install -y --no-install-recommends  autogen autoconf libtool

## install libxc
RUN git clone https://gitlab.com/libxc/libxc.git && cd libxc && autoreconf -i\
&& ./configure --prefix=/source/libxc/installation \
&& make -j4 \
&& make check \
&& make install


## install QE 7.4
## ldconfig: https://stackoverflow.com/questions/14769599/mpi-error-loading-shared-libraries
## sed make.inc: https://gitlab.com/QEF/q-e/-/issues/214
RUN cd /source \
    &&  wget --quiet https://gitlab.com/QEF/q-e/-/archive/qe-7.4/q-e-qe-7.4.tar.gz \
    && tar xzf q-e-qe-7.4.tar.gz
RUN cd /source/q-e-qe-7.4 \
    && ldconfig \
    &&  ./configure --with-libxc --with-libxc-prefix=/source/libxc/installation \
    && sed -i 's/\-I\/opt\/intel\/mkl\/include/\-I\/usr\/include\/mkl\//' make.inc \
    && make -j4 all w90 epw \
    && make install


## install SIESTA
RUN apt update && apt install -y --no-install-recommends gfortran cmake libopenmpi-dev liblapack-dev libscalapack-openmpi-dev libnetcdff-dev lua5.4 liblua5.4-dev
#    apt autoremove --purge -y && \
#    apt autoclean -y && \
#    rm -rf /var/cache/apt/* /var/lib/apt/lists/*

RUN cd /source \
  && git clone --recurse-submodules https://gitlab.com/siesta-project/siesta.git \
  && cd siesta \
  && git remote add upstream https://gitlab.com/siesta-project/siesta.git \
  && git fetch --all \
  && git checkout --track origin/master \
  && cmake -S. -B_build -DCMAKE_INSTALL_PREFIX=/source/siesta/installation -DCMAKE_Fortran_COMPILER="mpifort" -DSIESTA_WITH_NETCDF="ON" -DSIESTA_WITH_FLOOK="False" -DSIESTA_WITH_WANNIER90="ON" -DSCALAPACK_LINKER_FLAG="-lscalapack-openmpi" -DSCALAPACK_LIBRARY="/usr/lib/x86_64-linux-gnu/libscalapack-openmpi.so" \
  && cmake --build _build -j 4 \
  && cmake --install _build 


## CC: FHI-aims and FHI-vibes
# Create an empty folder to pour FHI-aims binaries into
# and install FHI-vibes sources in /source and package into /python_source/site-packages
RUN apt install -y --no-install-recommends libmkl-scalapack-lp64 libmkl-blacs-openmpi-lp64 \
  && cd /source \
  && mkdir FHIaims \ 
  && git clone https://gitlab.com/vibes-developers/vibes.git \
  && cd vibes \
  && pip install --upgrade --target /python_source/site-packages .
# N.B. --upgrade needed to ensure that /python_source/site-packages/bin is updated as well
COPY FHIaims.settings.gcc.cmake     /source/FHIaims/FHIaims.settings.gcc.cmake     
COPY FHIaims.settings.gcc.mkl.cmake /source/FHIaims/FHIaims.settings.gcc.mkl.cmake 
COPY vibesrc                        /source/vibes/.vibesrc                       
COPY FHIaims.TODO                   /source/FHIaims/TODO                       
# CC: vibesrc is copied into homefoled in ENTRYPOINT, 
#     TODO is just a list of things that need to be on site
#### IMPORTANT: This also installs ASE Version 3.22. If you need to switch to a different/newer
####            version, please contact carbogno@fhi-berlin.mpg.de, so that I can update my tutorials

## create work dir
RUN mkdir /work 

# create entrypoint
# expose port for jupyter


EXPOSE 8378

COPY entrypoint.sh /usr/local/bin/entrypoint.sh

RUN ["chmod", "+x", "/usr/local/bin/entrypoint.sh"]

# change user and group id to match host machine if options are passed accordingly
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
