[vibes.run]    run phonopy workflow with settings from phonopy.in

[calculator]   Update aims k_grid with kpt density of 3.5 to [4, 4, 4]
[calculator]   .. add `sc_accuracy_rho: 1e-06` to parameters (default)
[calculator]   .. add `relativistic: atomic_zora scalar` to parameters (default)
[calculator]   .. add `output_level: MD_light` to parameters (default)
* Message from file vibes/helpers/socketio.py, line 97, function get_port:
--> Port 12345 in use, changing to the next free port

[calculator]   Add basisset `light` for atom `Si` to basissets folder.
[calculator]   Calculator: aims
[calculator]   settings:
[calculator]     xc: pw-lda
[calculator]     k_grid: [4, 4, 4]
[calculator]     sc_accuracy_rho: 1e-06
[calculator]     relativistic: atomic_zora scalar
[calculator]     output_level: MD_light
[calculator]     compute_forces: True
[calculator]     use_pimd_wrapper: ('localhost', 12349)
[calculator]     aims_command: /u/mrinaldi/run_aims.sh
[calculator]     species_dir: /raven/u/mrinaldi/asesma2025/05_lattice_expansion/solutions/qha_44.926/phonopy/basissets
[vibes]        Run phonopy workflow in working directory
  /raven/u/mrinaldi/asesma2025/05_lattice_expansion/solutions/qha_44.926/phonopy
[phonopy.postprocess] Start phonopy postprocess:
[trajectory]   Parse `/raven/u/mrinaldi/asesma2025/05_lattice_expansion/solutions/qha_44.926/phonopy/trajectory.son`
[son] open file:  /raven/u/mrinaldi/asesma2025/05_lattice_expansion/solutions/qha_44.926/phonopy/trajectory.son
[socketio]     Use SocketIO with host localhost and port 12349
[backup]       /raven/u/mrinaldi/asesma2025/05_lattice_expansion/solutions/qha_44.926/phonopy/calculations does not exist, nothing to back up.
[vibes]        Compute structure 1 of 1: working
[vibes]        Compute structure 1 of 1: finished.
* Message from file vibes/helpers/watchdogs.py, line 172, function __call__:
--> Watchdog: running out of time!

[vibes]        Close the socket
[vibes]        Start postprocess.
[phonopy.postprocess] Start phonopy postprocess:
[trajectory]   Parse `phonopy/trajectory.son`
[son] open file:  phonopy/trajectory.son
[trajectory]   .. time elapsed: 0.001s
[trajectory]   .. create atoms
[trajectory]   .. time elapsed: 0.001s
[trajectory]   .. set raw hash
[trajectory]   .. time elapsed: 0.000s
[trajectory]   .. done in 0.002s
[phonopy.postprocess] .. done in 0.318s
[vibes]        done.
[phonopy.postprocess] Start phonopy postprocess:
[trajectory]   Parse `phonopy/trajectory.son`
[son] open file:  phonopy/trajectory.son
[trajectory]   .. time elapsed: 0.000s
[trajectory]   .. create atoms
[trajectory]   .. time elapsed: 0.000s
[trajectory]   .. set raw hash
[trajectory]   .. time elapsed: 0.000s
[trajectory]   .. done in 0.001s
[phonopy.postprocess] .. done in 0.304s
q_mesh not given, use values stored in phonopy/trajectory.son: [45, 45, 45]
[phonopy.postprocess] 
Extract phonopy results:
[phonopy.postprocess] .. q_mesh:   [45, 45, 45]
[phonopy.postprocess] .. write force constants
[phonopy.postprocess] Extract basic results:
[phonopy.postprocess] .. write primitive cell
[phonopy.postprocess] .. write supercell
[phonopy.postprocess] .. write force constants to FORCE_CONSTANTS
[phonopy.postprocess] Extract bandstructure
[phonopy.postprocess] .. write yaml
[phonopy.postprocess] Run mesh
[phonopy.postprocess] Extract thermal properties
[phonopy.postprocess] .. write yaml
[phonopy.postprocess] Extract DOS:
[phonopy.postprocess] .. write
[phonopy.postprocess] .. animation/animation_G.ascii written
[phonopy.postprocess] .. animation/animation_K.ascii written
[phonopy.postprocess] .. animation/animation_L.ascii written
[phonopy.postprocess] .. animation/animation_U.ascii written
[phonopy.postprocess] .. animation/animation_W.ascii written
[phonopy.postprocess] .. animation/animation_X.ascii written
[phonopy.postprocess] .. all files written to phonopy/output in 7.353s
[phonopy.postprocess] 
Plot phonopy results:
[phonopy.postprocess] Plot thermal properties
[phonopy.postprocess] Plot bandstructure
[phonopy.postprocess] Plot DOS:
[phonopy.postprocess] .. all files written to phonopy/output in 14.958s
[vibes.run]    run singlepoint calculations with settings from aims.in

[calculator]   Update aims k_grid with kpt density of 3.5 to [8, 8, 8]
[calculator]   .. add `sc_accuracy_rho: 1e-06` to parameters (default)
[calculator]   .. add `relativistic: atomic_zora scalar` to parameters (default)
[calculator]   .. add `output_level: MD_light` to parameters (default)
* Message from file vibes/helpers/socketio.py, line 97, function get_port:
--> Port 12345 in use, changing to the next free port

[calculator]   Add basisset `light_spd` for atom `Si` to basissets folder.
[calculator]   Calculator: aims
[calculator]   settings:
[calculator]     xc: pw-lda
[calculator]     k_grid: [8, 8, 8]
[calculator]     sc_accuracy_rho: 1e-06
[calculator]     relativistic: atomic_zora scalar
[calculator]     output_level: MD_light
[calculator]     use_pimd_wrapper: ('localhost', 12347)
[calculator]     aims_command: /u/mrinaldi/run_aims.sh
[calculator]     species_dir: /raven/u/mrinaldi/asesma2025/05_lattice_expansion/solutions/qha_44.926/aims/basissets
[socketio]     Use SocketIO with host localhost and port 12347
[backup]       /raven/u/mrinaldi/asesma2025/05_lattice_expansion/solutions/qha_44.926/aims/calculations does not exist, nothing to back up.
[vibes]        Compute structure 1 of 1: working
[vibes]        Compute structure 1 of 1: finished.
* Message from file vibes/helpers/watchdogs.py, line 172, function __call__:
--> Watchdog: running out of time!

[vibes]        Close the socket
[vibes]        done.
